'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');

const displayCountry = function (data, className = '') {
  const currencies = data.currencies;
  const currensyName = Object.values(currencies)[0].name;
  const currensySymbol = Object.values(currencies)[0].symbol;

  const languages = data.languages;
  const firstLanguage = Object.values(languages)[0];

  const html = `
  <article class="country ${className}">
    <img class="country__img" src="${data.flags.svg}" />
    <div class="country__data">
      <h3 class="country__name">${data.name.common}</h3>
      <h4 class="country__region">${data.region}</h4>
      <p class="country__row"><span>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>${(
        +data.population / 1000000
      ).toFixed(1)} –º–∏–ª–ª–∏–æ–Ω–æ–≤</p>
      <p class="country__row"><span>üó£Ô∏è</span>${firstLanguage}</p>
      <p class="country__row"><span>üí∞</span>${currensySymbol} ${currensyName}</p>
    </div>
  </article>
  `;

  countriesContainer.insertAdjacentHTML('beforeend', html);
  countriesContainer.style.opacity = 1;
};

const displayError = function (message) {
  countriesContainer.insertAdjacentText('beforeend', message);
  countriesContainer.style.opacity = 1;
};

// const getCoutnryAndBorderCountries = function (countryName) {
//   // –í—ã–∑–æ–≤ AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–µ
//   const request1 = new XMLHttpRequest();
//   request1.open('GET', `https://restcountries.com/v3.1/name/${countryName}`);
//   request1.send();

//   request1.addEventListener('load', function () {
//     const [data1] = JSON.parse(this.responseText);
//     console.log(data1);

//     // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
//     displayCountry(data1);

//     // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å–æ—Å–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω—É
//     const [firstNeighbour] = data1.borders;

//     if (!firstNeighbour) return;

//     // –í—ã–∑–æ–≤ AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–≤–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–µ
//     const request2 = new XMLHttpRequest();
//     request2.open(
//       'GET',
//       `https://restcountries.com/v3.1/alpha/${firstNeighbour}`
//     );
//     request2.send();

//     request2.addEventListener('load', function () {
//       const [data2] = JSON.parse(this.responseText);
//       console.log(data2);

//       displayCountry(data2, 'neighbour');
//     });
//   });
// };

const getDataAndConvertToJSON = function (
  url,
  errorMessage = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê.'
) {
  return fetch(url).then(response => {
    if (!response.ok)
      throw new Error(`${errorMessage} –û—à–∏–±–∫–∞ ${response.status}`);
    return response.json();
  });
};

// const getCoutnryData = function (countryName) {
//   getDataAndConvertToJSON(
//     `https://restcountries.com/v3.1/name/${countryName}`,
//     '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
//   )
//     .then(data => {
//       displayCountry(data[0]);

//       if (!data[0].borders) throw new Error('–°–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');

//       const firstNeighbour = data[0].borders[0];

//       return getDataAndConvertToJSON(
//         `https://restcountries.com/v3.1/alpha/${firstNeighbour}`,
//         '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
//       );
//     })
//     .then(data => displayCountry(data[0], 'neighbour'))
//     .catch(e => {
//       console.error(`${e} üßê`);
//       displayError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê: ${e.message} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1;
//     });
// };

// btn.addEventListener('click', function () {
//   getCoutnryData('ukraine');
// });

////////////////////////////////////////////////////

// const getCoutnryData = function (countryName) {
//   const request = new XMLHttpRequest();
//   request.open('GET', `https://restcountries.com/v3.1/name/${countryName}`);
//   request.send();
//   // console.log(request.responseText);
//   request.addEventListener('load', function () {
//     const [data] = JSON.parse(this.responseText);
//     console.log(data);

//     const currencies = data.currencies;
//     const currensyName = Object.values(currencies)[0].name;
//     const currensySymbol = Object.values(currencies)[0].symbol;

//     const languages = data.languages;
//     const firstLanguage = Object.values(languages)[0];

//     const html = `
//   <article class="country">
//     <img class="country__img" src="${data.flags.svg}" />
//     <div class="country__data">
//       <h3 class="country__name">${data.name.common}</h3>
//       <h4 class="country__region">${data.region}</h4>
//       <p class="country__row"><span>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>${(
//         +data.population / 1000000
//       ).toFixed(1)} –º–∏–ª–ª–∏–æ–Ω–æ–≤</p>
//       <p class="country__row"><span>üó£Ô∏è</span>${firstLanguage}</p>
//       <p class="country__row"><span>üí∞</span>${currensySymbol} ${currensyName}</p>
//     </div>
//   </article>
//   `;

//     countriesContainer.insertAdjacentHTML('beforeend', html);
//     countriesContainer.style.opacity = 1;
//   });
// };

// getCoutnryAndBorderCountries('usa');

// setTimeout(() => {
//   console.log('–ü—Ä–æ—à–ª–∞ 1 —Å–µ–∫—É–Ω–¥–∞');
//   setTimeout(() => {
//     console.log('–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã');
//     setTimeout(() => {
//       console.log('–ü—Ä–æ—à–ª–æ 3 —Å–µ–∫—É–Ω–¥—ã');
//       setTimeout(() => {
//         console.log('–ü—Ä–æ—à–ª–æ 4 —Å–µ–∫—É–Ω–¥—ã');
//       }, 1000);
//     }, 1000);
//   }, 1000);
// }, 1000);

// const request = new XMLHttpRequest();
// request.open('GET', `https://restcountries.com/v3.1/name/${countryName}`);
// request.send();

// const getCoutnryData = function (countryName) {
//   fetch(`https://restcountries.com/v3.1/name/${countryName}`)
//     .then(function (response) {
//       console.log(response);
//       return response.json();
//     })
//     .then(function (data) {
//       console.log(data);
//       displayCountry(data[0]);
//     });
// };

// const getCoutnryData = function (countryName) {
//   fetch(`https://restcountries.com/v3.1/name/${countryName}`)
//     .then(response => {
//       console.log(response);

//       if (!response.ok)
//         throw new Error(`–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∞ ${response.status}`);
//       return response.json();
//     })
//     .then(data => {
//       displayCountry(data[0]);
//       // const firstNeighbour = data[0].borders[0];
//       const firstNeighbour = 'afasga';

//       if (!firstNeighbour) return;

//       return fetch(`https://restcountries.com/v3.1/alpha/${firstNeighbour}`);
//     })
//     .then(response => {
//       if (!response.ok)
//         throw new Error(`–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∞ ${response.status}`);
//       return response.json();
//     })
//     .then(data => displayCountry(data[0], 'neighbour'))
//     .catch(e => {
//       console.error(`${e} üßê`);
//       displayError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê: ${e.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1;
//     });
// };

// getCoutnryData('japan');

/////////////////////////////////////////////////
// –ó–∞–¥–∞–Ω–∏–µ 1

// –í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é displayCountryByGPS(), –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç GPS. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ç–æ—Ä—ã–µ API –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ò—Ç–∞–∫, –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—ã –≤—ã –≤–ø–µ—Ä–≤—ã–µ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

// 1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é displayCountryByGPS(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã (lat) –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Ç—ã (lng) (—ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã GPS, –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ).
// 2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ ¬´–æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ç–∞–∫–æ–µ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:
// https://geocode.xyz/api
// –í—ã–∑–æ–≤ AJAX –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–ª—è URL –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
// https://geocode.xyz/52.508,13.381?geoit=json
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Fetch API –∏ promises, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é getDataAndConvertToJSON()!
// 3. –ü–æ–ª—É—á–∏–≤ –¥–∞–Ω–Ω—ã–µ, –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ó–∞—Ç–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞: ‚ÄúYou are in Rome, Italy‚Äù.
// 4. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ —Ü–µ–ø–æ—á–∫–∏ promises –º–µ—Ç–æ–¥ catch() –∏ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
// 5. –≠—Ç–∏ API –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É. –ï—Å–ª–∏ –≤—ã –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É —Å –∫–æ–¥–æ–º 403. –≠—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ fetch() –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–±–µ—â–∞–Ω–∏–µ. –ü–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–π—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–µ—â–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ, –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ —Å–º—ã—Å–ª—É.
// 6. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ API –æ —Å—Ç—Ä–∞–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏.
// 7. –û—Ç–æ–±—Ä–∞–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–π –ª–µ–∫—Ü–∏–∏ (–≤—ã –¥–∞–∂–µ –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ).

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:

//               –®–∏—Ä–æ—Ç–∞  –î–æ–ª–≥–æ—Ç–∞
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 1  35.756  139.256
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2  48.857  2.358
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 3  40.708  -74.051

// const displayCountryByGPS = function (lat, lng) {
//   fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`)
//     .then(response => {
//       if (!response.ok)
//         throw new Error(
//           `–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–æ—à–∏–±–∫–∞ ${response.status})`
//         );
//       return response.json();
//     })
//     .then(data => {
//       console.log(data);
//       console.log(`You are in ${data.city}, ${data.country}`);
//       return getDataAndConvertToJSON(
//         `https://restcountries.com/v3.1/name/${data.country.toLowerCase()}`,
//         '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
//       );
//     })
//     .then(data => displayCountry(data[0]))
//     .catch(e => {
//       console.error(`${e} üßê`);
//       displayError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê: ${e.message} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1;
//     })

//     .catch(e => console.error(`${e.message} üßê`));
// };

// displayCountryByGPS(35.756, 139.256);
// displayCountryByGPS(48.857, 2.358);
// displayCountryByGPS(40.708, -74.051);

///////////////////////////////////////////////
// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π

// console.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞');
// setTimeout(() => console.log('–¢–∞–π–º–µ—Ä 0 —Å–µ–∫—É–Ω–¥'), 0);
// Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ promise 1').then(result => console.log(result));
// Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ promise 2').then(result => {
//   for (let i = 0; i < 10000000000; i++) {}
//   console.log(result);
// });
// console.log('–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞');

///////////////////////////////////////////////
// –°–æ–∑–¥–∞–Ω–∏–µ –ü—Ä–æ—Å—Ç–æ–≥–æ Promise

// const lotteryPromise = new Promise(function (resolve, reject) {
//   console.log('–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏ ü™Ñ');
//   setTimeout(function () {
//     if (Math.random() >= 0.5) {
//       resolve('–í—ã –í–´–ò–ì–†–ê–õ–ò! üí∂');
//     } else {
//       reject(new Error('–í—ã –ü–†–û–ò–ì–†–ê–õ–ò! üòø'));
//     }
//   }, 3000);
// });

// lotteryPromise.then(res => console.log(res)).catch(err => console.error(err));

// // Promisifying (–ø—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è) —Ñ—É–Ω–∫—Ü–∏–∏ setTimeout()
// const wait = function (seconds) {
//   return new Promise(function (resolve) {
//     setTimeout(resolve, seconds * 1000);
//   });
// };

// wait(3)
//   .then(() => {
//     console.log('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è 3 —Å–µ–∫—É–Ω–¥—ã');
//     return wait(2);
//   })
//   .then(() => {
//     console.log('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è 2 —Å–µ–∫—É–Ω–¥—ã');
//   });

// setTimeout(() => {
//   console.log('–ü—Ä–æ—à–ª–∞ 1 —Å–µ–∫—É–Ω–¥–∞');
//   setTimeout(() => {
//     console.log('–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã');
//     setTimeout(() => {
//       console.log('–ü—Ä–æ—à–ª–æ 3 —Å–µ–∫—É–Ω–¥—ã');
//       setTimeout(() => {
//         console.log('–ü—Ä–æ—à–ª–æ 4 —Å–µ–∫—É–Ω–¥—ã');
//       }, 1000);
//     }, 1000);
//   }, 1000);
// }, 1000);

// wait(1)
//   .then(() => {
//     console.log('–ü—Ä–æ—à–ª–∞ 1 —Å–µ–∫—É–Ω–¥–∞');
//     return wait(1);
//   })
//   .then(() => {
//     console.log('–ü—Ä–æ—à–ª–∞ 2 —Å–µ–∫—É–Ω–¥–∞');
//     return wait(1);
//   })
//   .then(() => {
//     console.log('–ü—Ä–æ—à–ª–∞ 3 —Å–µ–∫—É–Ω–¥–∞');
//     return wait(1);
//   })
//   .then(() => {
//     console.log('–ü—Ä–æ—à–ª–∞ 4 —Å–µ–∫—É–Ω–¥–∞');
//     return wait(1);
//   });

// Promise.resolve('Resolved!').then(res => console.log(res));
// Promise.reject(new Error('Rejected!')).catch(e => console.error(e));

///////////////////////////////////////////////
// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è API –ì–µ–æ–ª–æ–∫–∞—Ü–∏–∏

// const getUserPosition = function () {
//   return new Promise(function (resolve, reject) {
//     // navigator.geolocation.getCurrentPosition(
//     //   position => resolve(position),
//     //   e => reject(e)
//     // );
//     navigator.geolocation.getCurrentPosition(resolve, reject);
//   });
// };

// // getUserPosition()
// //   .then(pos => console.log(pos))
// //   .catch(e => console.error(e));

// const displayUserCountry = function () {
//   getUserPosition()
//     .then(pos => {
//       const { latitude: lat, longitude: lng } = pos.coords;

//       return fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);
//     })
//     .then(response => {
//       if (!response.ok)
//         throw new Error(
//           `–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–æ—à–∏–±–∫–∞ ${response.status})`
//         );
//       return response.json();
//     })
//     .then(data => {
//       console.log(data);
//       console.log(`You are in ${data.city}, ${data.country}`);
//       return getDataAndConvertToJSON(
//         `https://restcountries.com/v3.1/name/${data.country.toLowerCase()}`,
//         '–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
//       );
//     })
//     .then(data => displayCountry(data[0]))
//     .catch(e => {
//       console.error(`${e} üßê`);
//       displayError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê: ${e.message} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1;
//     })

//     .catch(e => console.error(`${e.message} üßê`));
// };

// displayUserCountry();

///////////////////////////////////////////////
// –ó–∞–¥–∞–Ω–∏–µ 2
// –í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
// 1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é createImageElement(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç imagePath –∫–∞–∫ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç promise, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π HTML —ç–ª–µ–º–µ–Ω—Ç img (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ document.createElement ('img')) –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç src –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
// 2. –ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫ —ç–ª–µ–º–µ–Ω—Ç—É DOM —Å –∫–ª–∞—Å—Å–æ–º images –∏ —Å–¥–µ–ª–∞–π—Ç–µ promise –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º. –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ promise –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∞–º–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º img. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ error), –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–±–µ—â–∞–Ω–∏–µ.
// 3. –ï—Å–ª–∏ —ç—Ç–∞ —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞ –¥–ª—è –≤–∞—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ–æ.
// 4. –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ promise, –∏—Å–ø–æ–ª—å–∑—É—è then(), –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
// 5. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é wait(), –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–Ω–µ–µ.
// 6. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 2 —Å–µ–∫—É–Ω–¥ —Å–ø—Ä—è—á—å—Ç–µ —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è CSS —Å–≤–æ–π—Å—Ç–≤–∞ display –∑–Ω–∞—á–µ–Ω–∏–µ none) –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç img –∏–∑ promise, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –∏–∑ createImageElement(), —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
// 7. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã.
// 8. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 2 —Å–µ–∫—É–Ω–¥ —Å–ø—Ä—è—á—å—Ç–µ —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ img. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —É–∫–∞–∑–∞–≤ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ Fast 3G –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Network –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.

// const wait = function (seconds) {
//   return new Promise(function (resolve) {
//     setTimeout(resolve, seconds * 1000);
//   });
// };

// const imageContainer = document.querySelector('.images');

// let currentImage;

// const createImageElement = function (imagePath) {
//   return new Promise(function (resolve, reject) {
//     const imgEl = document.createElement('img');
//     imgEl.src = imagePath;

//     imgEl.addEventListener('load', function () {
//       imageContainer.append(imgEl);
//       resolve(imgEl);
//     });

//     imgEl.addEventListener('error', function () {
//       reject(new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
//     });
//   });
// };

// createImageElement('img/image1.jpg')
//   .then(image => {
//     currentImage = image;
//     console.log('–ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
//     return wait(2);
//   })
//   .then(() => {
//     currentImage.style.display = 'none';
//     return createImageElement('img/image2.jpg');
//   })
//   .then(image => {
//     currentImage = image;
//     console.log('–í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
//     return wait(2);
//   })
//   .then(() => {
//     currentImage.style.display = 'none';
//   })
//   .catch(e => console.error(e));

// const getCoutnryData = function (countryName) {
//   fetch(`https://restcountries.com/v3.1/name/${countryName}`)
//     .then(response => {
//       console.log(response);

//       if (!response.ok)
//         throw new Error(`–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∞ ${response.status}`);
//       return response.json();
//     })
//     .then(data => {
//       displayCountry(data[0]);
//       // const firstNeighbour = data[0].borders[0];
//       const firstNeighbour = 'afasga';

//       if (!firstNeighbour) return;

//       return fetch(`https://restcountries.com/v3.1/alpha/${firstNeighbour}`);
//     })
//     .then(response => {
//       if (!response.ok)
//         throw new Error(`–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—à–∏–±–∫–∞ ${response.status}`);
//       return response.json();
//     })
//     .then(data => displayCountry(data[0], 'neighbour'))
//     .catch(e => {
//       console.error(`${e} üßê`);
//       displayError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê: ${e.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1;
//     });
// };

///////////////////////////////////////////////
// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ó–Ω–∞—á–µ–Ω–∏—è –≤ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –§—É–Ω–∫—Ü–∏—è—Ö

// const getUserPosition = function () {
//   return new Promise(function (resolve, reject) {
//     navigator.geolocation.getCurrentPosition(resolve, reject);
//   });
// };

// const getCountryData = async function () {
//   try {
//     const userPosition = await getUserPosition();

//     const { latitude: lat, longitude: lng } = userPosition.coords;

//     const geocodingResponse = await fetch(
//       `https://geocode.xyz/${lat},${lng}?geoit=json`
//     );

//     if (!geocodingResponse.ok)
//       throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');

//     const geocodingData = await geocodingResponse.json();

//     const response = await fetch(
//       `https://restcountries.com/v3.1/name/${geocodingData.country.toLowerCase()}`
//     );

//     if (!response.ok) throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã');

//     const data = await response.json();
//     displayCountry(data[0]);
//     return `You are in ${geocodingData.city}, ${geocodingData.country}`;
//   } catch (e) {
//     console.error(`${e} üßê`);
//     displayError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê ${e.message}`);

//     // –û—Ç–∫–ª–æ–Ω—è–µ–º promise, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
//     throw e;
//   }
// };

// console.log('1 –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
// // const place = getCountryData();
// // console.log(place);
// // getCountryData()
// //   .then(place => console.log(`2 ${place}`))
// //   .catch(e => console.error(`2 ${e.message} üßê`))
// //   .finally(() => console.log('3 –ü–æ–ª—É—á–∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'));

// (async function () {
//   try {
//     const place = await getCountryData();
//     console.log(`2 ${place}`);
//   } catch (e) {
//     console.error(`2 ${e.message} üßê`);
//   }
//   console.log('3 –ü–æ–ª—É—á–∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
// })();

///////////////////////////////////////////////
// –ó–∞–ø—É—Å–∫ –ù–µ—Å–∫–æ–ª—å–∫–∏—Ö Promise –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

// const print3CountriesCapitals = async function (counry1, counry2, counry3) {
//   try {
//     // const [country1Data] = await getDataAndConvertToJSON(
//     //   `https://restcountries.com/v3.1/name/${counry1}`
//     // );
//     // const [country2Data] = await getDataAndConvertToJSON(
//     //   `https://restcountries.com/v3.1/name/${counry2}`
//     // );
//     // const [country3Data] = await getDataAndConvertToJSON(
//     //   `https://restcountries.com/v3.1/name/${counry3}`
//     // );

//     // console.log([
//     //   country1Data.capital,
//     //   country2Data.capital,
//     //   country3Data.capital,
//     // ]);

//     const countriesData = await Promise.all([
//       getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/${counry1}`),
//       getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/${counry2}`),
//       getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/${counry3}`),
//     ]);

//     console.log(countriesData.map(countryData => countryData[0].capital));
//   } catch (e) {
//     console.error(e);
//   }
// };

// print3CountriesCapitals('ukraine', 'russia', 'canada');

///////////////////////////////////////////////
// race, allSettled & any

// Promise.race()

// (async function () {
//   const response = await Promise.race([
//     getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/france`),
//     getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/italy`),
//     getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/spain`),
//   ]);
//   console.log(response[0]);
// })();

// const timeout = function (seconds) {
//   return new Promise(function (_, reject) {
//     setTimeout(function () {
//       reject(new Error('–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è'));
//     }, seconds * 1000);
//   });
// };

// Promise.race([
//   getDataAndConvertToJSON(`https://restcountries.com/v3.1/name/spain`),
//   timeout(3),
// ])
//   .then(data => console.log(data[0]))
//   .catch(e => console.error(e));

// Promise.allSettled()
// Promise.allSettled([
//   Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–æ!'),
//   Promise.reject('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ!'),
//   Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–æ!'),
// ]).then(data => console.log(data));

// Promise.all([
//   Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–æ!'),
//   Promise.reject('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ!'),
//   Promise.resolve('–í—ã–ø–æ–ª–Ω–µ–Ω–æ!'),
// ])
//   .then(data => console.log(data))
//   .catch(e => console.error(e));

// Promise.any() ES2021
// Promise.any([
//   Promise.reject('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ!'),
//   Promise.resolve('1 –í—ã–ø–æ–ª–Ω–µ–Ω–æ!'),
//   Promise.resolve('2 –í—ã–ø–æ–ª–Ω–µ–Ω–æ!'),
// ])
//   .then(data => console.log(data))
//   .catch(e => console.error(e));

///////////////////////////////////////////////
// –ó–∞–¥–∞–Ω–∏–µ 3

// 1. –°–æ–∑–¥–∞–π—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é loadAndWait(), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ó–∞–¥–∞–Ω–∏—è 2, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async / await (—Ç–æ–ª—å–∫–æ —Ç–∞ —á–∞—Å—Ç—å, –≥–¥–µ promise –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é createImageElement())
// 2. –°—Ä–∞–≤–Ω–∏—Ç–µ —ç—Ç–∏ 2 –≤–µ—Ä—Å–∏–∏, –ø–æ–¥—É–º–∞–π—Ç–µ –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.
// 3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ –Ω–∞ Fast3G –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Network –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
// 4. –°–æ–∑–¥–∞–π—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é loadAllImages(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º imagePathsArray.
// 5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ map() –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createImageElement() (–ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è –º–∞—Å—Å–∏–≤ –Ω–∞–∑–æ–≤–∏—Ç–µ images).
// 6. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Å—Å–∏–≤–æ–º images –≤ –∫–æ–Ω—Å–æ–ª–∏! –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤—ã –æ–∂–∏–¥–∞–ª–∏?
// 7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –º–∞—Å—Å–∏–≤–∞.
// 8. –î–æ–±–∞–≤—å—Ç–µ –∫–ª–∞—Å—Å parallel –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤ –Ω—ë–º –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∏–ª–∏ CSS).
// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
// ['img / image1.jpg', 'img / image2.jpg', 'img / image3.jpg']
// –î–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é loadAndWait().

const wait = function (seconds) {
  return new Promise(function (resolve) {
    setTimeout(resolve, seconds * 1000);
  });
};

const imageContainer = document.querySelector('.images');

// let currentImage;

const createImageElement = function (imagePath) {
  return new Promise(function (resolve, reject) {
    const imgEl = document.createElement('img');
    imgEl.src = imagePath;

    imgEl.addEventListener('load', function () {
      imageContainer.append(imgEl);
      resolve(imgEl);
    });

    imgEl.addEventListener('error', function () {
      reject(new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
    });
  });
};

// createImageElement('img/image1.jpg')
//   .then(image => {
//     currentImage = image;
//     console.log('–ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
//     return wait(2);
//   })
//   .then(() => {
//     currentImage.style.display = 'none';
//     return createImageElement('img/image2.jpg');
//   })
//   .then(image => {
//     currentImage = image;
//     console.log('–í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
//     return wait(2);
//   })
//   .then(() => {
//     currentImage.style.display = 'none';
//   })
//   .catch(e => console.error(e));

const loadAndWait = async function () {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let image = await createImageElement('img/image1.jpg');
    console.log('–ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await wait(2);
    image.style.display = 'none';

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = await createImageElement('img/image2.jpg');
    console.log('–í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await wait(2);
    image.style.display = 'none';
  } catch (e) {
    console.error(e);
  }
};

// loadAndWait();

const loadAllImages = async function (imagePathsArray) {
  try {
    const images = imagePathsArray.map(
      async imagePath => await createImageElement(imagePath)
    );
    console.log(images);

    const imageElements = await Promise.all(images);
    console.log(imageElements);
    imageElements.forEach(img => img.classList.add('parallel'));
  } catch (e) {
    console.error(e);
  }
};

loadAllImages(['img/image1.jpg', 'img/image2.jpg', 'img/image3.jpg']);
